// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  trees         CharacterTree[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Character Tree Models
model CharacterTree {
  id          String      @id @default(cuid())
  name        String
  description String?
  userId      String?
  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  characters  Character[]
  isPublic    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([userId])
  @@index([isPublic])
}

model Character {
  id              String            @id @default(cuid())
  name            String
  description     String?
  role            String?
  age             Int?
  background      String?
  personalityType String?
  goals           String?
  fears           String?
  positionX       Float             @default(0)
  positionY       Float             @default(0)
  treeId          String
  tree            CharacterTree     @relation(fields: [treeId], references: [id], onDelete: Cascade)
  relationships   Relationship[]    @relation("CharacterRelationships")
  relatedTo       Relationship[]    @relation("RelatedCharacters")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([treeId])
}

model Relationship {
  id            String    @id @default(cuid())
  characterId   String
  relatedToId   String
  type          String    // "family", "friend", "enemy", "romantic", "professional", etc.
  description   String?
  strength      Int       @default(5) // 1-10 scale
  character     Character @relation("CharacterRelationships", fields: [characterId], references: [id], onDelete: Cascade)
  relatedTo     Character @relation("RelatedCharacters", fields: [relatedToId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([characterId, relatedToId])
  @@index([characterId])
  @@index([relatedToId])
}
